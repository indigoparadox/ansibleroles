---
# vim: set tabstop=2 expandtab shiftwidth=2 smarttab :

# Gather some facts, first.

- name: Create features list.
  set_fact:
    webvhost_features: {}
  no_log: true

- name: Determine if PHP is in use
  set_fact:
    webvhost_features: "{{ webvhost_features | combine({ 'php': true }) }}"
  with_items:
    - '{{ webvhost_sites }}'
  when: not item.php is defined or item.php
  no_log: true

- name: Determine if SSL is in use
  set_fact:
    webvhost_features: "{{ webvhost_features | combine({ 'ssl': true, item.ssl: true }) }}"
  with_items:
    - '{{ webvhost_sites }}'
  when: item.ssl is defined
  no_log: true

- include_tasks: unix-os-freebsd.yml
  when: ansible_os_family == 'FreeBSD'

# Enable non-SSL vhosts, assuming they might be needed for SSL validation.

- include: 'unix-engine-apache.yml'
  vars:
    do_ssl: False
  when: webvhost_engine == 'apache'

# TODO: Only include these if something changed, otherwise it overwrites SSL
#       config below and causes unneccesary restarts.
- include: 'unix-engine-nginx.yml'
  vars:
    do_ssl: False
  when: webvhost_engine == 'nginx'

# Perform common tasks.

- name: Ensure document root exists
  file:
    path: '{{ item.document_root }}'
    state: directory
    owner: '{{ item.user | default(webvhost_htdocs_owner) }}'
    group: '{{ item.group | default(webvhost_htdocs_group) }}'
  when: 
    - not item.enabled is defined or item.enabled == True
  with_items: "{{ webvhost_sites | selectattr('document_root', 'defined') | list }}"

- name: Create well-known site directory
  file:
    path: '{{ item.document_root }}/.well-known'
    state: directory
    owner: '{{ item.user | default(webvhost_htdocs_owner) }}'
    group: '{{ item.group | default(webvhost_htdocs_group) }}'
    mode: 0775
  when:
    - item.ssl is defined
    - item.ssl == 'acme'
  with_items: '{{ webvhost_sites }}'

# Request SSL certificates.

- include_role:
    name: 'ip.getcert'
    tasks_from: 'unix-ssl-{{ site.ssl }}.yml'
    allow_duplicates: yes
    defaults_from: 'main.yml'
  loop_control:
    loop_var: site
  vars:
    common_name: '{{ site.server_name | default(inventory_hostname) }}'
    csr_path: "{{ getcert_le_dirs.config + '/live/' + common_name + '/' if getcert_engine == 'acme' else getcert_ssl_path }}/{{ 'request.csr' if getcert_engine == 'acme' else common_name + '.csr' }}"
    privkey_path: "{{ getcert_le_dirs.config + '/live/' + common_name + '/' if getcert_engine == 'acme' else getcert_ssl_path }}/{{ 'privkey.pem' if getcert_engine == 'acme' else common_name + '.pem' }}"
    cert_path: "{{ getcert_le_dirs.config + '/live/' + common_name + '/' if getcert_engine == 'acme' else getcert_ssl_path }}/{{ 'fullchain.pem' if getcert_engine == 'acme' else common_name + '.crt' }}"
    ca_cert_path: '{{ getcert_ssl_path }}/{{ common_name }}.ca.crt'
    getcert_engine: '{{ site.ssl }}'
    document_root: '{{ site.document_root }}'
    le_mail: '{{ site.le_mail | default(getcert_le_mail) }}'
  with_items: '{{ webvhost_sites }}'
  when:
    - site.ssl is defined

# Enable SSL-enabled vhosts, now that they should have certificates.

- include: 'unix-engine-apache.yml'
  vars:
    do_ssl: True
  when: webvhost_engine == 'apache'

- include: 'unix-engine-nginx.yml'
  vars:
    do_ssl: True
  when: webvhost_engine == 'nginx'

