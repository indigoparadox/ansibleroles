---
# vim: set tabstop=2 expandtab shiftwidth=2 smarttab :

# Gather some facts, first.

- name: Create features list.
  set_fact:
    webvhost_features: {}
  no_log: true

- name: Determine if PHP is in use
  set_fact:
    webvhost_features: "{{ webvhost_features | combine({ 'php': true }) }}"
  with_items:
    - '{{ webvhost_sites }}'
  when: not item.php is defined or item.php
  no_log: true

- name: Determine if SSL is in use
  set_fact:
    webvhost_features: "{{ webvhost_features | combine({ 'ssl': true, item.ssl: true }) }}"
  with_items:
    - '{{ webvhost_sites }}'
  when: item.ssl is defined
  no_log: true

- include_tasks: unix-os-freebsd.yml
  when: ansible_os_family == 'FreeBSD'

- name: Check whether SSL certificate exists
  stat: 
    path: "{{ webvhost_le_dirs.config + '/live' if item.ssl == 'acme' else webvhost_ssl_path }}/{{ 'fullchain.pem' if item.ssl == 'acme' else item.server_name + '.crt' if item.server_name is defined else inventory_hostname + '.crt' }}"
  register: ssl_crt_remote
  when: item.ssl is defined
  with_items: '{{ webvhost_sites }}'

- name: Check whether SSL private key exists
  stat: 
    path: "{{ webvhost_le_dirs.config + '/live' if item.item.ssl == 'acme' else webvhost_ssl_path }}/{{ 'privkey.pem' if item.item.ssl == 'acme' else item.item.server_name + '.pem' if item.item.server_name is defined else inventory_hostname + '.pem' }}"
  register: ssl_key_remote
  when: item.item.ssl is defined
  with_items: '{{ ssl_crt_remote.results }}'

- name: Check SSL certificate validity
  openssl_certificate:
    path: "{{ webvhost_le_dirs.config + '/live' if item.item.item.ssl is defined and item.item.item.ssl == 'acme' else webvhost_ssl_path }}/{{ 'fullchain.pem' if item.item.item.ssl is defined and item.item.item.ssl == 'acme' else item.item.item.server_name + '.crt' if item.item.item.server_name is defined else inventory_hostname + '.crt' }}"
    provider: assertonly
    has_expired: False
  ignore_errors: True
  register: ssl_valid_remote
  when:
    - item.item.item.ssl is defined
    - item.item.stat.exists is defined
    - item.item.stat.exists == True
  with_items: '{{ ssl_key_remote.results }}'

# Enable non-SSL vhosts, assuming they might be needed for SSL validation.

- include: 'unix-engine-apache.yml'
  vars:
    do_ssl: False
  when: webvhost_engine == 'apache'

# TODO: Only include these if something changed, otherwise it overwrites SSL
#       config below and causes unneccesary restarts.
- include: 'unix-engine-nginx.yml'
  vars:
    do_ssl: False
  when: webvhost_engine == 'nginx'

# Perform common tasks.

- name: Ensure document root exists
  file:
    path: '{{ item.document_root }}'
    state: directory
    owner: '{{ item.user | default(webvhost_htdocs_owner) }}'
    group: '{{ item.group | default(webvhost_htdocs_group) }}'
  when: 
    - not item.enabled is defined or item.enabled == True
  with_items: "{{ webvhost_sites | selectattr('document_root', 'defined') | list }}"

# Request SSL certificates.

- include_tasks: 'unix-ssl-msad.yml'
  when: webvhost_features.msad is defined and webvhost_features.msad

- include_tasks: 'unix-ssl-acme.yml'
  when: webvhost_features.acme is defined and webvhost_features.acme

- include_tasks: 'unix-ssl-freenas.yml'
  when: webvhost_features.freenas is defined and webvhost_features.freenas

# Enable SSL-enabled vhosts, now that they should have certificates.

- include: 'unix-engine-apache.yml'
  vars:
    do_ssl: True
  when: webvhost_engine == 'apache'

- include: 'unix-engine-nginx.yml'
  vars:
    do_ssl: True
  when: webvhost_engine == 'nginx'

