---
# vim: set tabstop=2 expandtab shiftwidth=2 smarttab :
# tasks file for ip.openvpn

- name: Check for OpenVPN installation
  win_reg_stat:
    path: HKLM:\SOFTWARE\OpenVPN
  register: reg_openvpn

- name: Ensure temp directory present
  win_file:
    path: '{{ installer_temp }}'
    state: directory
  when: not reg_openvpn.exists

- name: Upload OpenVPN installer
  win_copy:
    src: '{{ installer_src }}/{{ openvpn_installer }}'
    dest: '{{ installer_temp }}\\{{ openvpn_installer }}'
  when: not reg_openvpn.exists

- name: Run OpenVPN installer
  win_command: '{{ installer_temp }}\\{{ openvpn_installer }} /S'
  when: ansible_os_family == 'Windows' and not reg_openvpn.exists

- name: Cleanup OpenVPN installer
  win_file:
    path: '{{ installer_temp }}\\{{ openvpn_installer }}'
    state: absent

- name: Cleanup OpenVPN desktop shortcut
  win_file:
    path: 'C:\\Users\\Public\\Desktop\\OpenVPN GUI.lnk'
    state: absent

- name: Check for OpenVPN client private key
  win_stat:
    path: '{{ openvpn_config_root }}\\{{ openvpn_filename_key }}'
  register: client_key

- name: Check for OpenVPN client certificate
  win_stat:
    path: '{{ openvpn_config_root }}\\{{ openvpn_filename_cert }}'
  register: client_crt

- include_tasks: generate.yml

- name: Fix OpenVPN client private key line endings
  command: 'unix2dos {{ ca_tmp.path }}/{{ openvpn_filename_key }}'
  delegate_to: localhost
  when: not client_key.stat.exists

- name: Upload OpenVPN client private key
  win_copy:
    src: '{{ ca_tmp.path }}/{{ openvpn_filename_key }}'
    dest: '{{ openvpn_config_root }}\\{{ openvpn_filename_key }}'
  when: not client_key.stat.exists

- name: Fix OpenVPN client certificate format
  command: 'openssl x509 -in {{ ca_tmp.path }}/{{ openvpn_filename_cert }}.temp.crt -text -out {{ ca_tmp.path }}/{{ openvpn_filename_cert }}'
  delegate_to: localhost
  when: not client_crt.stat.exists

- name: Fix OpenVPN client certificate line endings
  command: 'unix2dos {{ ca_tmp.path }}/{{ openvpn_filename_cert }}'
  delegate_to: localhost
  when: not client_crt.stat.exists

- name: Upload OpenVPN client certificate
  win_copy:
    src: '{{ ca_tmp.path }}/{{ openvpn_filename_cert }}'
    dest: '{{ openvpn_config_root }}\\{{ openvpn_filename_cert }}'
  when: not client_crt.stat.exists

- name: Fix OpenVPN TLS auth key line endings
  command: 'unix2dos {{ ca_tmp.path }}/{{ openvpn_filename_ta }}'
  delegate_to: localhost
  changed_when: false

- name: Upload OpenVPN TLS auth key
  win_copy:
    src: '{{ ca_tmp.path }}/{{ openvpn_filename_ta }}'
    dest: '{{ openvpn_config_root }}\\{{ openvpn_filename_ta }}'
  when: openvpn_filename_ta is defined

- name: Fix OpenVPN CA certificate line endings
  command: 'unix2dos {{ ca_tmp.path }}/{{ openvpn_filename_cert_ca }}'
  delegate_to: localhost
  changed_when: false

- name: Upload OpenVPN CA certificate
  win_copy:
    src: '{{ ca_tmp.path }}/{{ openvpn_filename_cert_ca }}'
    dest: '{{ openvpn_config_root }}\\{{ openvpn_filename_cert_ca }}'

- name: Upload OpenVPN config
  win_template:
    src: 'templates/client.conf.j2'
    dest: '{{ openvpn_config_root }}\\{{ openvpn_network_name }}.ovpn'

- name: Enable VPN service
  win_service:
    name: OpenVPNService
    state: started
    start_mode: auto

